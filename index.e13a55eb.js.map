{"mappings":"AA6BoD,SAA3CA,EAAYC,GACnB,MAAMC,EAAa,IAAIC,WAEvBD,EAAWE,OAAS,SAAUC,IA2BhC,SAAyBC,GAGvB,IAAIC,EADJC,QAAQC,IAAoB,iBAATH,GAEC,iBAATA,EAEoEC,EAAjED,EAAKI,MAAK,WAAYC,IAAIC,QAC7BC,MAAMC,QAAQR,GAEsBC,EAAjCD,EAAKK,IAAIC,QAErBJ,QAAQO,MAAM,iCAQM,SAACR,GACvB,MAAMS,EAAcT,EAAUU,QAAQC,MAAK,CAACC,EAAGC,IAAMD,EAAIC,IAEnDC,EAAYL,EAAY,GAC9BR,QAAQC,IAAIY,GACZ,MAAMC,EAAYN,EAAYA,EAAYO,OAAS,GACnDf,QAAQC,IAAIa,GAIe,MACrBE,EADMjB,EAAUkB,QAAO,CAACC,EAAKC,IAAQD,EAAMC,GAAK,GAChCpB,EAAUgB,OAChCf,QAAQC,IAAIe,GAII,MAAVI,EAAcZ,EAAYO,OAAS,EACnCM,EACJb,EAAYO,OAAS,GAAM,GACtBP,EAAYY,EAAc,GAAKZ,EAAYY,IAAgB,EAC5DZ,EAAYY,GAClBpB,QAAQC,IAAIoB,GAEZ,MAAMC,EAAU,C,UACdR,E,UACAD,E,QACAG,E,OACAK,EACAE,mBAAoBC,EAAoBzB,GAAW,GACnD0B,mBAAoBD,EAAoBzB,GAAW,KAzGvD,SAA2BuB,GAEK,MAAxBI,EAAmBC,SAASC,eAAe,aAC3CC,EAAmBF,SAASC,eAAe,aAC3CE,EAAiBH,SAASC,eAAe,WACzCG,EAAgBJ,SAASC,eAAe,UACxCI,EACJL,SAASC,eAAe,sBACpBK,EACJN,SAASC,eAAe,sBAGuBF,EAAhCQ,mBAAmB,YAAa,GAAGZ,EAAQR,aAC5De,EAAiBK,mBAAmB,YAAa,IAAIZ,EAAQT,aAC7DiB,EAAeI,mBAAmB,YAAa,IAAIZ,EAAQN,WAC3De,EAAcG,mBAAmB,YAAa,GAAGZ,EAAQD,UACzDW,EAA0BE,mBACxB,YACA,IAAIZ,EAAQC,mBAAmBY,KAAK,SAEtCF,EAA0BC,mBACxB,YACA,GAAGZ,EAAQG,mBAAmBU,KAAK,UAsFrCC,CAAkBd,IAtCOe,CAATtC,GArCduC,CAFazC,EAAM0C,OAAOC,SAK5B9C,EAAW+C,QAAU,SAAU5C,GAC7BG,QAAQO,MAAM,6BAAoDV,EAAM0C,OAAOhC,QAIjEb,EAALgD,WAAWjD,GA0ExB,SAAS+B,EAAoBmB,EAAKC,GAAa,GAC7C,IAAIC,EAAkB,GAClBC,EAAkB,CAACH,EAAI,IAE3B,IAAK,IAAII,EAAI,EAAGA,EAAIJ,EAAI5B,OAAQgC,IAE5BH,GAAeD,EAAII,GAAKJ,EAAII,EAAI,KAC9BH,GAAcD,EAAII,GAAKJ,EAAII,EAAI,GAGjCD,EAAgBE,KAAKL,EAAII,KAGrBD,EAAgB/B,OAAS8B,EAAgB9B,SAC3C8B,EAAkBC,EAAgBrC,SAGpCqC,EAAkB,CAACH,EAAII,KAU3B,OALID,EAAgB/B,OAAS8B,EAAgB9B,SAC3C8B,EAAkBC,GAIbD,EAhGSlB,SAASC,eAAe,aAChCqB,iBAAiB,UAE3B,WACE,MAAMC,EAAWC,KAAKC,MACtBpD,QAAQC,IAAIiD,GACRA,GACF1D,EAAY0D,EAAS,OANyB","sources":["src/index.js"],"sourcesContent":["import './css/styles.css';\n\nfunction updateHTMLResults(results) {\n  // Отримуємо доступ до елементів за їх id\n  const maxNumberElement = document.getElementById('maxNumber');\n  const minNumberElement = document.getElementById('minNumber');\n  const averageElement = document.getElementById('average');\n  const medianElement = document.getElementById('median');\n  const increasingSequenceElement =\n    document.getElementById('increasingSequence');\n  const decreasingSequenceElement =\n    document.getElementById('decreasingSequence');\n\n  // Оновлюємо значення елементів з отриманими результатами\n  maxNumberElement.insertAdjacentText('beforeend', `${results.maxNumber}`);\n  minNumberElement.insertAdjacentText('beforeend', ` ${results.minNumber}`);\n  averageElement.insertAdjacentText('beforeend', ` ${results.average}`);\n  medianElement.insertAdjacentText('beforeend', `${results.median}`);\n  increasingSequenceElement.insertAdjacentText(\n    'beforeend',\n    ` ${results.increasingSequence.join(', ')}`\n  );\n  decreasingSequenceElement.insertAdjacentText(\n    'beforeend',\n    `${results.decreasingSequence.join(', ')}`\n  );\n}\n\n// Функція для завантаження файлу та перетворення даних в масив\nfunction processFile(inputFile) {\n  const fileReader = new FileReader();\n\n  fileReader.onload = function (event) {\n    const data = event.target.result; //список чисел з файлу\n    // console.log(data);\n    arrayConversion(data);\n  };\n\n  fileReader.onerror = function (event) {\n    console.error('Помилка при читанні файлу:', event.target.error);\n  };\n\n  // Завантажуємо файл\n  fileReader.readAsText(inputFile);\n}\n\n// Доступ до файлу\n\nconst fileInput = document.getElementById('fileInput');\nfileInput.addEventListener('change', handleFiles, false);\n\nfunction handleFiles() {\n  const fileList = this.files;\n  console.log(fileList);\n  if (fileList) {\n    processFile(fileList[0]);\n  }\n}\n\nfunction arrayConversion(data) {\n  // console.log(data);\n  console.log(typeof data === 'string');\n  let dataArray;\n  if (typeof data === 'string') {\n    // Видаляємо прбіли та перенесення рядків, потім разбиваємо по комам або перенесенням рядків\n    dataArray = data.split(/[,;\\n.]/).map(Number); // Перетворюємо список чисел в масив чисел\n  } else if (Array.isArray(data)) {\n    // якщо data вже є массивом, перетворюєм його елементи в числа\n    dataArray = data.map(Number);\n  } else {\n    console.error('Непідтримуємий формат даних.');\n  }\n  calculateValues(dataArray);\n\n  return dataArray;\n}\n\n// Розрахунок шуканих величин\nfunction calculateValues(dataArray) {\n  const sortedArray = dataArray.slice().sort((a, b) => a - b); // сортуємо масив від найменшого до найбільшого\n\n  const minNumber = sortedArray[0];\n  console.log(minNumber);\n  const maxNumber = sortedArray[sortedArray.length - 1];\n  console.log(maxNumber);\n\n  //знаходимо середнє арифметичне\n\n  const sum = dataArray.reduce((acc, num) => acc + num, 0);\n  const average = sum / dataArray.length;\n  console.log(average);\n\n  // знаходимо медіану\n\n  const middleIndex = sortedArray.length / 2;\n  const median =\n    sortedArray.length % 2 === 0\n      ? (sortedArray[middleIndex - 1] + sortedArray[middleIndex]) / 2\n      : sortedArray[middleIndex];\n  console.log(median);\n\n  const results = {\n    maxNumber,\n    minNumber,\n    average,\n    median,\n    increasingSequence: findLongestSequence(dataArray, true),\n    decreasingSequence: findLongestSequence(dataArray, false),\n  };\n\n  updateHTMLResults(results);\n\n  return results;\n}\n\n// Найдовша найдовгішу  послідовність\n\nfunction findLongestSequence(arr, increasing = true) {\n  let longestSequence = [];\n  let currentSequence = [arr[0]];\n\n  for (let i = 1; i < arr.length; i++) {\n    if (\n      (increasing && arr[i] > arr[i - 1]) ||\n      (!increasing && arr[i] < arr[i - 1])\n    ) {\n      // If the current number satisfies the condition, add it to the current sequence\n      currentSequence.push(arr[i]);\n    } else {\n      // Otherwise, compare the current sequence with the longest sequence\n      if (currentSequence.length > longestSequence.length) {\n        longestSequence = currentSequence.slice();\n      }\n      // Start a new current sequence\n      currentSequence = [arr[i]];\n    }\n  }\n\n  // Check the last current sequence\n  if (currentSequence.length > longestSequence.length) {\n    longestSequence = currentSequence;\n  }\n\n  // console.log(longestSequence);\n  return longestSequence;\n}\n"],"names":["$1f0dc3b9307be026$var$processFile","inputFile","fileReader","FileReader","onload","event","data","dataArray","console","log","split","map","Number","Array","isArray","error","sortedArray","slice","sort","a","b","minNumber","maxNumber","length","average","reduce","acc","num","middleIndex","median","results","increasingSequence","$1f0dc3b9307be026$var$findLongestSequence","decreasingSequence","maxNumberElement","document","getElementById","minNumberElement","averageElement","medianElement","increasingSequenceElement","decreasingSequenceElement","insertAdjacentText","join","$1f0dc3b9307be026$var$updateHTMLResults","$1f0dc3b9307be026$var$calculateValues","$1f0dc3b9307be026$var$arrayConversion","target","result","onerror","readAsText","arr","increasing","longestSequence","currentSequence","i","push","addEventListener","fileList","this","files"],"version":3,"file":"index.e13a55eb.js.map"}